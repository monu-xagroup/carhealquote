{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAQA;AACA;AACA;AACA;AACA;AACA;AACA;MACA;;MAMA;MACA;MACA;MACA;QAA4B;UAASA;QAAA;MAAA;MACrC;MACA,4CAA6CC,yDAAc;QAC3DC;QACAC;UAAA;YAAsBC;UAAA,CAA2B;QAAA;MACjD,CAAC;;MAED;AACA;AACA;AACA;AACA;AACA;AACA;MACA;MACA;MACA;MACA;QACAC,SAAaC,6DAAiB;QAC9BC,aAAiB,2DAAU;UAAA;QAAA;QAC3BC;MACA;MACA;MAAA,IACAC,kDACA,gCACA;MACAC,QACA;MACAC;QAAAC;QACA;QACA;MACA,IAEA;MACA;MACA,0BAA4B,uEAAc,oEAAW,4EAAmB;QACxE;UAAAA;UACA;QACA;QAAA;MAAA,GACC;MACD;MAAA,IACAC;QAAAC;QACA;UAAA;UAAAF;UACAG;UACAA;UACAA;UACAA;UACAA;UACAA;UACAA,6CAA6C,eAAe;UAC5DA;UACAA;UACA;UACAA;UACA;UACAA;UACA;UACAA;UACA;UACAA;UACA;UACAA;UACA;UACAA,mBAA0Bd,uDAAY;UACtC;AACA;AACA;AACA;AACA;UACAc,yBAAgCd,uDAAY;UAC5Cc;UACAA;UACAA;UAAA;QACA;QACA;QAAAC;UAAAC;UAAAC,KACA;YAAqB;UAAA;UAAAC,KACrB;YAA0B,iBAAiB,8EAAqBC;UAAA;UAChE;QAAA;UAAAH;UAAAC,KACA;YAAoB;UAAA;UAAAC,KACpB;YACA,gBAAwB,8EAAqBC;YAC7C;UACA;UACA;QAAA;UAAAH;UAAAC,KACA;YAAoB,iBAAU;UAA0B;QAAA;UAAAD;UAAAG,OACxD;YAAA;YACA,mBACAC,gCACAC;cACA;cACA;cACA;cACA;cACA;gBACAC;cACA,OACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACAC;kBAAA;gBAAA;cACA;YACA,CAAS;UACT;QAAA;UAAAP;UAAAG,OACA;YACA;UACA;UACA;QAAA;UAAAH;UAAAG,OACA;YACA;YACA;YACA;YACAK;YACA;YACA;YA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YACAc,UACAD,yCACA3D,iBACoB6C,mEAAe,CACnC;YACAgB;UACA,CAAa;QACb,CAAK;MAAA,CAAiB;MACtB;QAAe,mDAAmDzE,gEAAyB;UAAyByE;YAA4B;UAAA,CAA0B;UAAAE;YAAyB,iDAAgDlB,mEAAe,EAC1PA,mEAAe,EACfC,mEAAe;UAAA,CAAI;UAAAc;YAAyB,kEAAgEf,mEAAe;UAAA;QAAA,CAAM;MAAA,CAAI;;MAE7I;AACA;AACA;AACA;AACA;AACA;AACA;;MAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCnbA;AACA;AACA;AACA;AACA;AACA;AACA;;MAMA;MACA,yBAA2B,wFAA+B;QAAGmB;MAAA,CAAgB;MAC7E;AACA;AACA;AACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;AACA;AACA;AACA;AACA;MACA;QACAxE,SAAaC,6DAAiB;QAC9BC,aAAiB,2DAAU;UAAA;QAAA;QAC3BC;MACA;MACA;MAAA,IACAsE;QAAAlE;MAAA,IAEA;MACA;MACA,qBAAuB,uEAAc,oEAAW;QAChD;UAAAA;UACA;QACA;QAAA;MAAA,GACC;MACD;AACA;AACA;AACA;MAHA,IAIAmE;QAAAjE;QACA;UAAA;UAAAF;UACAoE;UACAA;UACAA;UACAA;UACAA;UACAA;UACAA;UACAA;UACAA;UACAA;UACAA;UACAA;UACAA;UACAA;UACA;UACAA,oBAA0BC,uDAAY;UACtC;UACAD,mBAAyBC,uDAAY;UACrC;AACA;AACA;AACA;AACA;UACAD,yBAA+BC,uDAAY;UAC3C;UACAD;UACAA;UACA;AACA;AACA;AACA;UACAA;UACA;AACA;AACA;AACA;UACAA;UACA;UACAA;UACA;UACAA;UACAA;UACA;UACAA,gCAAsCE,oDAAkB;UACxD;UACAF;YACA;YACA;YACA;cACA;YACA;YACAA;cACAA,wCACAG;cACA;cACA;gBACA;gBACAH;gBACAA;gBACAvD;gBACAuD;gBACAA,wBAA0C;gBAC1CA;gBACAA;gBACAA;gBACAA;gBACA;gBACA;kBACAA;gBACA;cACA;YACA,CAAa;UACb;UACA;AACA;AACA;AACA;UACAA;YACA;cACA;cACA;gBACA;gBACAvD;gBACA;gBACAuD;gBACAA;gBACA;gBACA;kBACAA;gBACA;cACA;YACA;UACA;UACA;UACAA;YACA;cACA;cACA;cACA;cACAI;gBACA3D;gBACAuD;gBACAA;gBACAA;gBACA;kBACAA;gBACA;gBACAA;cACA;YACA;UACA;UACA;UACAA;YACA;YACA;YACA;cACAA;YACA;UACA;UACAA;UACAA;UACAK;YACA;YACAC;YACAA;UACA,CAAS;UAAA;QACT;QACA;QAAAtE;UAAAC;UAAAC,KACA;YAAmB;UAAA;UAAAC,KACnB;YACA,eAAuB,8EAAqBC;UAC5C;UACA;QAAA;UAAAH;UAAAC,KACA;YAAgB;UAAA;UAAAC,KAChB;YACA,YAAoB,6EAAoBoE;YACxC;YACA;YACA;UACA;UACA;QAAA;UAAAtE;UAAAC,KACA;YAAgB;UAAA;UAAAC,KAChB;YACA,YAAoB,6EAAoBoE;YACxC;YACA;YACA;UACA;UACA;QAAA;UAAAtE;UAAAC,KACA;YAAiB;UAAA;UAAAC,KACjB;YACA,aAAqB,6EAAoBoE;YACzC;cACA;YACA;YACA;YACA;UACA;UACA;QAAA;UAAAtE;UAAAC,KACA;YAAuB;UAAA;UAAAC,KACvB;YAA4B,mBAAmB,8EAAqBC;UAAA;UACpE;AACA;AACA;AACA;QAHA;UAAAH;UAAAC,KAIA;YAAyB;UAAA;UAAAC,KACzB;YACA;cACA;YACA,OACA;cACA,qBAAiC,6EAAoBC;YACrD,OACA;cACA;YACA;UACA;UACA;QAAA;UAAAH;UAAAC,KACA;YACA;YACA;cACA;YACA;YACA;UACA;UAAAC,KACA;YACA;cACA,YAAwB,6EAAoBoE;cAC5C;cACA;cACA;gBACAnE;cACA;cACA;cACA;cACA;cACA;YACA;UACA;UACA;QAAA;UAAAH;UAAAC,KACA;YAAqB;UAAA;UAAAC,KACrB;YACA,iBAAyB,8EAAqBC;UAC9C;UACA;QAAA;UAAAH;UAAAC,KACA;YACA;cACA;cACA;cACA;YACA;YACA;YACA;YACA;YACA;cACA;YACA;YACA;UACA;UACA;QAAA;UAAAD;UAAAG,OACA;YACA;UACA;UACA;QAAA;UAAAH;UAAAG,OACA;YACA;UACA;UACA;QAAA;UAAAH;UAAAC,KACA;YAAoB;UAAA;UACpB;AACA;AACA;AACA;QAHA;UAAAD;UAAAG,OAIA;YACA;YACA;YACA;UACA;UACA;QAAA;UAAAH;UAAAG,OACA;YACA;UACA;UACA;AACA;AACA;AACA;QAHA;UAAAH;UAAAG,OAIA;YACA;cACA;YACA;YACA;cACA;YACA;YACA;UACA;UACA;QAAA;UAAAH;UAAAG,OACA;YACA;YACA,yCAA4C,qCAA2B,2BAAiB;YACxF;YACA;cACA;cACAoE,8BAAmCC,kBAAQC,aAAO,4CAAkCC;YACpF;UACA;UACA;QAAA;UAAA1E;UAAAG,OACA;YACA;YACA;YACA,yCAA4CwE,4BAAkBA,kBAAQ;YACtE;YACA;cACA;cACAJ,8BAAmCC,kBAAQC,aAAO,4CAAkCC,WAAM;cAC1F;cACA;cACA;cACA;cACAE;YACA;UACA;UACA;QAAA;UAAA5E;UAAAG,OACA;YACA;YACA;YACA;YACA;YACA;YACA;cACA,gCAAqCqE,kBAAQC,aAAOI;YACpD;UACA;UACA;QAAA;UAAA7E;UAAAG,OACA;YACA;YACA,mDAAoD2E,2BAAiBA,kBAAS;YAC9E;YACA;YACA;YACA;YACA;YACA;YACA;cACA;cACA;cACA,8CAAmDN,kBAAQC,aAAOK,2BAAiBC;YACnF;YACA;cACA;cACA;cACA;gBACAC;cACA,OACA;gBACAA;cACA;cACArC,wBAA6BqC,MAAK,aAAQ,0BAAoB;YAC9D;YACA;UACA;QAAA;UAAAhF;UAAAG,OACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;cACA,gCAAqCqE,mBAASK;YAC9C;UACA;UACA;AACA;AACA;AACA;QAHA;UAAA7E;UAAAG,OAIA;YACA;YACA;UACA;UACA;QAAA;UAAAH;UAAAG,OACA;YACA;UACA;QAAA;UAAAH;UAAAG,OACA;YAAA;YACA,mBACAC,gCACAC;cACA4E;cACAA;YACA,CAAS;YACT;cACA;gBACAA;cACA,CAAa;YACb;UACA;QAAA;UAAAjF;UAAAG,OACA;YACA;YACAkE;YACAA;YACA;YACA;YACA;YACA;UACA;QAAA;UAAArE;UAAAG,OACA;YACA;cACA;YACA;YACA;YACA;YACA;YACA;UACA;QAAA;UAAAH;UAAAG,OACA;YACA;YACA;YACA;YACA;UACA;QAAA;UAAAH;UAAAG,OACA;YACA;UACA;QAAA;UAAAH;UAAAG,OACA;YACA,qBAA6B,uEAAcK,UAC3C;cACA;YACA;YACA;YACA;cACA,KAAiB0E,0DAAO;gBACxB;gBACA;cACA,KAAiBA,4DAAS;gBAC1B;gBACA;cACA,KAAiBA,sDAAG;gBACpB;gBACA;cACA,KAAiBA,uDAAI;gBACrB;gBACA;cACA,KAAiBA,6DAAU;gBAC3B;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;cACA,KAAiBA,2DAAQ;gBACzB;gBACA;cACA,KAAiBA,8DAAW;gBAC5B;gBACA;gBACA;cACA,KAAiBA,6DAAU;gBAC3B;gBACA;cACA;gBACA;gBACA;gBACA;YACA;YACA;cACA;cACA;YACA;YACA;YACA1E;UACA;QAAA;UAAAR;UAAAG,OACA;YACA;cACA;YACA;UACA;UACA;QAAA;UAAAH;UAAAG,OACA;YACA;UACA;UACA;AACA;AACA;AACA;AACA;QAJA;UAAAH;UAAAG,OAKA;YACA;YACA;YACA;YACA;YACA;YACA;YACAgF;YACAA;YACA;cACAA;YACA;YACA;YACA;cACAC;YACA;UACA;UACA;QAAA;UAAApF;UAAAG,OACA;YACA;YACAgF;YACAA;YACAA;YACAA;YACAA;YACA;YACA;cACAC;YACA;UACA;UACA;QAAA;UAAApF;UAAAG,OACA;YACA;UACA;UACA;QAAA;UAAAH;UAAAG,OACA;YACA;cACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;cACAwE;YACA;YACA;YACA;YACA;YACA;YACA;cACA;YACA,OACA;cACA;YACA,OACA;cACA;cACA;cACA;cACA;cACA;cACA;YACA;UACA;UACA;Q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","names":["enterDuration","_angular_core__WEBPACK_IMPORTED_MODULE_0__","providedIn","factory","disableToggleValue","provide","_angular_forms__WEBPACK_IMPORTED_MODULE_1__","useExisting","multi","MatSlideToggleChange","source","checked","_classCallCheck","MatSlideToggle","_inherits","_this","_createClass","key","get","set","value","monitor","subscribe","_this2","Promise","event","_MatSlideToggleBase","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__","type","selectors","viewQuery","hostAttrs","hostVars","hostBindings","inputs","disabled","disableRipple","color","tabIndex","name","id","labelPosition","ariaLabel","ariaLabelledby","required","ariaDescribedby","outputs","change","toggleChange","exportAs","features","ngContentSelectors","decls","vars","consts","template","directives","_angular_material_core__WEBPACK_IMPORTED_MODULE_2__","_angular_cdk_observers__WEBPACK_IMPORTED_MODULE_6__","styles","encapsulation","changeDetection","decorators","args","_thumbEl","_thumbBarEl","_inputElement","selector","host","providers","MatSlideToggleRequiredValidator","_MatSlideToggleRequiredValidatorModule","exports","declarations","MatSlideToggleModule","imports","passive","MatSliderChange","MatSlider","_this3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","rxjs__WEBPACK_IMPORTED_MODULE_4__","getTouchIdForSlider","findMatchingTouch","_ngZone","element","v","transform","axis","sign","scale","percent","display","offset","tickSize","rotate","side","_this4","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__","document","window","_MatSliderBase","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_7__","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_8__","_angular_common__WEBPACK_IMPORTED_MODULE_9__","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_10__","invert","max","min","step","thumbLabel","tickInterval","vertical","displayWith","valueText","input","valueChange","_sliderWrapper","point","x","y","undefined","i","MatSliderModule","_angular_material_core__WEBPACK_IMPORTED_MODULE_3__","casesRoutes","path","component","_booking_journal_booking_journal_component__WEBPACK_IMPORTED_MODULE_4__","resolve","version","src_app_resolvers_versionControl_resolver__WEBPACK_IMPORTED_MODULE_2__","BookingJournalModule","_angular_common__WEBPACK_IMPORTED_MODULE_8__","_angular_forms__WEBPACK_IMPORTED_MODULE_9__","_angular_material_icon__WEBPACK_IMPORTED_MODULE_10__","src_app_icons_module__WEBPACK_IMPORTED_MODULE_1__","_angular_router__WEBPACK_IMPORTED_MODULE_11__","_angular_material_menu__WEBPACK_IMPORTED_MODULE_12__","devextreme_angular__WEBPACK_IMPORTED_MODULE_13__","devextreme_angular__WEBPACK_IMPORTED_MODULE_14__","devextreme_angular__WEBPACK_IMPORTED_MODULE_15__","devextreme_angular__WEBPACK_IMPORTED_MODULE_16__","devextreme_angular_ui_nested__WEBPACK_IMPORTED_MODULE_17__","src_app_widgets_chq_widgets_module__WEBPACK_IMPORTED_MODULE_3__","_angular_material_sidenav__WEBPACK_IMPORTED_MODULE_18__","_angular_material_slider__WEBPACK_IMPORTED_MODULE_19__","_angular_material_dialog__WEBPACK_IMPORTED_MODULE_20__","_angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_21__","_angular_material_tooltip__WEBPACK_IMPORTED_MODULE_22__","_ngx_translate_core__WEBPACK_IMPORTED_MODULE_23__","src_app_helper_directive_module__WEBPACK_IMPORTED_MODULE_0__","_booking_preview_booking_preview_component__WEBPACK_IMPORTED_MODULE_6__","_booking_message_booking_message_component__WEBPACK_IMPORTED_MODULE_5__","BookingMessageComponent","dialogRef","data","formBuilder","commonService","group","Type","_angular_forms__WEBPACK_IMPORTED_MODULE_4__","Email","Subject","Message","placeHolder","label","options","suffix","icon","iconColor","messageForm","valid","output","setValue","console","log","_angular_material_dialog__WEBPACK_IMPORTED_MODULE_6__","_angular_core__WEBPACK_IMPORTED_MODULE_5__","ctx"],"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/slider.js","webpack:///src/app/modules/repair/booking-journal/booking-journal.module.ts","webpack:///src/app/modules/repair/booking-journal/booking-message/booking-message.component.ts","webpack:///src/app/modules/repair/booking-journal/booking-message/booking-message.component.html"],"sourcesContent":["import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function (a0) { return { enterDuration: a0 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nconst _MatSlideToggleBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}))));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.color = this.defaultColor = defaults.color || 'accent';\n        this._noopAnimations = animationMode === 'NoopAnimations';\n    }\n    /** Whether the slide-toggle is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlideToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\", ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 20, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction1(18, _c3, ctx._noopAnimations ? 0 : 150));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_noopAnimations'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = /*@__PURE__*/ function () { let ɵMatSlideToggleRequiredValidator_BaseFactory; return function MatSlideToggleRequiredValidator_Factory(t) { return (ɵMatSlideToggleRequiredValidator_BaseFactory || (ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator)))(t || MatSlideToggleRequiredValidator); }; }();\nMatSlideToggleRequiredValidator.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); };\n_MatSlideToggleRequiredValidatorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); };\nMatSlideToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ], _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n","import { DOCUMENT, CommonModule } from '@angular/common';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Attribute, NgZone, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\n\nconst _c0 = [\"sliderWrapper\"];\nconst activeEventOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nconst MAT_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlider),\n    multi: true\n};\n/** A simple change event emitted by the MatSlider component. */\nclass MatSliderChange {\n}\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nconst _MatSliderBase = mixinTabIndex(mixinColor(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nclass MatSlider extends _MatSliderBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _ngZone, _document, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._invert = false;\n        this._max = 100;\n        this._min = 0;\n        this._step = 1;\n        this._thumbLabel = false;\n        this._tickInterval = 0;\n        this._value = null;\n        this._vertical = false;\n        /** Event emitted when the slider value has changed. */\n        this.change = new EventEmitter();\n        /** Event emitted when the slider thumb moves. */\n        this.input = new EventEmitter();\n        /**\n         * Emits when the raw value of the slider changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this.onTouched = () => { };\n        this._percent = 0;\n        /**\n         * Whether or not the thumb is sliding and what the user is using to slide it with.\n         * Used to determine if there should be a transition for the thumb and fill track.\n         */\n        this._isSliding = null;\n        /**\n         * Whether or not the slider is active (clicked or sliding).\n         * Used to shrink and grow the thumb as according to the Material Design spec.\n         */\n        this._isActive = false;\n        /** The size of a tick interval as a percentage of the size of the track. */\n        this._tickIntervalPercent = 0;\n        /** The dimensions of the slider. */\n        this._sliderDimensions = null;\n        this._controlValueAccessorChangeFn = () => { };\n        /** Subscription to the Directionality change EventEmitter. */\n        this._dirChangeSubscription = Subscription.EMPTY;\n        /** Called when the user has put their pointer down on the slider. */\n        this._pointerDown = (event) => {\n            // Don't do anything if the slider is disabled or the\n            // user is using anything other than the main mouse button.\n            if (this.disabled || this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {\n                return;\n            }\n            this._ngZone.run(() => {\n                this._touchId = isTouchEvent(event) ?\n                    getTouchIdForSlider(event, this._elementRef.nativeElement) : undefined;\n                const pointerPosition = getPointerPositionOnPage(event, this._touchId);\n                if (pointerPosition) {\n                    const oldValue = this.value;\n                    this._isSliding = 'pointer';\n                    this._lastPointerEvent = event;\n                    event.preventDefault();\n                    this._focusHostElement();\n                    this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n                    this._bindGlobalEvents(event);\n                    this._focusHostElement();\n                    this._updateValueFromPosition(pointerPosition);\n                    this._valueOnSlideStart = oldValue;\n                    // Emit a change and input event if the value changed.\n                    if (oldValue != this.value) {\n                        this._emitInputEvent();\n                    }\n                }\n            });\n        };\n        /**\n         * Called when the user has moved their pointer after\n         * starting to drag. Bound on the document level.\n         */\n        this._pointerMove = (event) => {\n            if (this._isSliding === 'pointer') {\n                const pointerPosition = getPointerPositionOnPage(event, this._touchId);\n                if (pointerPosition) {\n                    // Prevent the slide from selecting anything else.\n                    event.preventDefault();\n                    const oldValue = this.value;\n                    this._lastPointerEvent = event;\n                    this._updateValueFromPosition(pointerPosition);\n                    // Native range elements always emit `input` events when the value changed while sliding.\n                    if (oldValue != this.value) {\n                        this._emitInputEvent();\n                    }\n                }\n            }\n        };\n        /** Called when the user has lifted their pointer. Bound on the document level. */\n        this._pointerUp = (event) => {\n            if (this._isSliding === 'pointer') {\n                if (!isTouchEvent(event) || typeof this._touchId !== 'number' ||\n                    // Note that we use `changedTouches`, rather than `touches` because it\n                    // seems like in most cases `touches` is empty for `touchend` events.\n                    findMatchingTouch(event.changedTouches, this._touchId)) {\n                    event.preventDefault();\n                    this._removeGlobalEvents();\n                    this._isSliding = null;\n                    this._touchId = undefined;\n                    if (this._valueOnSlideStart != this.value && !this.disabled) {\n                        this._emitChangeEvent();\n                    }\n                    this._valueOnSlideStart = this._lastPointerEvent = null;\n                }\n            }\n        };\n        /** Called when the window has lost focus. */\n        this._windowBlur = () => {\n            // If the window is blurred while dragging we need to stop dragging because the\n            // browser won't dispatch the `mouseup` and `touchend` events anymore.\n            if (this._lastPointerEvent) {\n                this._pointerUp(this._lastPointerEvent);\n            }\n        };\n        this._document = _document;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        _ngZone.runOutsideAngular(() => {\n            const element = elementRef.nativeElement;\n            element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n            element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n        });\n    }\n    /** Whether the slider is inverted. */\n    get invert() { return this._invert; }\n    set invert(value) {\n        this._invert = coerceBooleanProperty(value);\n    }\n    /** The maximum value that the slider can have. */\n    get max() { return this._max; }\n    set max(v) {\n        this._max = coerceNumberProperty(v, this._max);\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The minimum value that the slider can have. */\n    get min() { return this._min; }\n    set min(v) {\n        this._min = coerceNumberProperty(v, this._min);\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The values at which the thumb will snap. */\n    get step() { return this._step; }\n    set step(v) {\n        this._step = coerceNumberProperty(v, this._step);\n        if (this._step % 1 !== 0) {\n            this._roundToDecimal = this._step.toString().split('.').pop().length;\n        }\n        // Since this could modify the label, we need to notify the change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Whether or not to show the thumb label. */\n    get thumbLabel() { return this._thumbLabel; }\n    set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     */\n    get tickInterval() { return this._tickInterval; }\n    set tickInterval(value) {\n        if (value === 'auto') {\n            this._tickInterval = 'auto';\n        }\n        else if (typeof value === 'number' || typeof value === 'string') {\n            this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n        }\n        else {\n            this._tickInterval = 0;\n        }\n    }\n    /** Value of the slider. */\n    get value() {\n        // If the value needs to be read and it is still uninitialized, initialize it to the min.\n        if (this._value === null) {\n            this.value = this._min;\n        }\n        return this._value;\n    }\n    set value(v) {\n        if (v !== this._value) {\n            let value = coerceNumberProperty(v, 0);\n            // While incrementing by a decimal we can end up with values like 33.300000000000004.\n            // Truncate it to ensure that it matches the label and to make it easier to work with.\n            if (this._roundToDecimal && value !== this.min && value !== this.max) {\n                value = parseFloat(value.toFixed(this._roundToDecimal));\n            }\n            this._value = value;\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the slider is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** The value to be used for display purposes. */\n    get displayValue() {\n        if (this.displayWith) {\n            // Value is never null but since setters and getters cannot have\n            // different types, the value getter is also typed to return null.\n            return this.displayWith(this.value);\n        }\n        // Note that this could be improved further by rounding something like 0.999 to 1 or\n        // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n        // every change detection cycle.\n        if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n            return this.value.toFixed(this._roundToDecimal);\n        }\n        return this.value || 0;\n    }\n    /** set focus to the host element */\n    focus(options) {\n        this._focusHostElement(options);\n    }\n    /** blur the host element */\n    blur() {\n        this._blurHostElement();\n    }\n    /** The percentage of the slider that coincides with the value. */\n    get percent() { return this._clamp(this._percent); }\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     */\n    _shouldInvertAxis() {\n        // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n        // top. However from a y-axis standpoint this is inverted.\n        return this.vertical ? !this.invert : this.invert;\n    }\n    /** Whether the slider is at its minimum value. */\n    _isMinValue() {\n        return this.percent === 0;\n    }\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     */\n    _getThumbGap() {\n        if (this.disabled) {\n            return DISABLED_THUMB_GAP;\n        }\n        if (this._isMinValue() && !this.thumbLabel) {\n            return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n        }\n        return 0;\n    }\n    /** CSS styles for the track background element. */\n    _getTrackBackgroundStyles() {\n        const axis = this.vertical ? 'Y' : 'X';\n        const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n        const sign = this._shouldInvertMouseCoords() ? '-' : '';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`\n        };\n    }\n    /** CSS styles for the track fill element. */\n    _getTrackFillStyles() {\n        const percent = this.percent;\n        const axis = this.vertical ? 'Y' : 'X';\n        const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n        const sign = this._shouldInvertMouseCoords() ? '' : '-';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`,\n            // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n            // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n            // the value of the slider is 0, we can easily get into this situation. We force a\n            // recalculation by changing the element's `display` when it goes from 0 to any other value.\n            display: percent === 0 ? 'none' : ''\n        };\n    }\n    /** CSS styles for the ticks container element. */\n    _getTicksContainerStyles() {\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the ticks container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n        let offset = this._tickIntervalPercent / 2 * 100;\n        return {\n            'transform': `translate${axis}(${sign}${offset}%)`\n        };\n    }\n    /** CSS styles for the ticks element. */\n    _getTicksStyles() {\n        let tickSize = this._tickIntervalPercent * 100;\n        let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n        let axis = this.vertical ? 'Y' : 'X';\n        // Depending on the direction we pushed the ticks container, push the ticks the opposite\n        // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n        // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n        let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n        let styles = {\n            'backgroundSize': backgroundSize,\n            // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n            'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n        };\n        if (this._isMinValue() && this._getThumbGap()) {\n            const shouldInvertAxis = this._shouldInvertAxis();\n            let side;\n            if (this.vertical) {\n                side = shouldInvertAxis ? 'Bottom' : 'Top';\n            }\n            else {\n                side = shouldInvertAxis ? 'Right' : 'Left';\n            }\n            styles[`padding${side}`] = `${this._getThumbGap()}px`;\n        }\n        return styles;\n    }\n    _getThumbContainerStyles() {\n        const shouldInvertAxis = this._shouldInvertAxis();\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the thumb container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        let invertOffset = (this._getDirection() == 'rtl' && !this.vertical) ? !shouldInvertAxis : shouldInvertAxis;\n        let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n        return {\n            'transform': `translate${axis}(-${offset}%)`\n        };\n    }\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n    _shouldInvertMouseCoords() {\n        const shouldInvertAxis = this._shouldInvertAxis();\n        return (this._getDirection() == 'rtl' && !this.vertical) ? !shouldInvertAxis : shouldInvertAxis;\n    }\n    /** The language direction for this slider element. */\n    _getDirection() {\n        return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((origin) => {\n            this._isActive = !!origin && origin !== 'keyboard';\n            this._changeDetectorRef.detectChanges();\n        });\n        if (this._dir) {\n            this._dirChangeSubscription = this._dir.change.subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    ngOnDestroy() {\n        const element = this._elementRef.nativeElement;\n        element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n        element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n        this._lastPointerEvent = null;\n        this._removeGlobalEvents();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._dirChangeSubscription.unsubscribe();\n    }\n    _onMouseenter() {\n        if (this.disabled) {\n            return;\n        }\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    _onFocus() {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    _onBlur() {\n        this.onTouched();\n    }\n    _onKeydown(event) {\n        if (this.disabled || hasModifierKey(event) ||\n            (this._isSliding && this._isSliding !== 'keyboard')) {\n            return;\n        }\n        const oldValue = this.value;\n        switch (event.keyCode) {\n            case PAGE_UP:\n                this._increment(10);\n                break;\n            case PAGE_DOWN:\n                this._increment(-10);\n                break;\n            case END:\n                this.value = this.max;\n                break;\n            case HOME:\n                this.value = this.min;\n                break;\n            case LEFT_ARROW:\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                // sighted users, therefore we do not swap the meaning.\n                this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n                break;\n            case UP_ARROW:\n                this._increment(1);\n                break;\n            case RIGHT_ARROW:\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n                break;\n            case DOWN_ARROW:\n                this._increment(-1);\n                break;\n            default:\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                // it.\n                return;\n        }\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n            this._emitChangeEvent();\n        }\n        this._isSliding = 'keyboard';\n        event.preventDefault();\n    }\n    _onKeyup() {\n        if (this._isSliding === 'keyboard') {\n            this._isSliding = null;\n        }\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /**\n     * Binds our global move and end events. They're bound at the document level and only while\n     * dragging so that the user doesn't have to keep their pointer exactly over the slider\n     * as they're swiping across the screen.\n     */\n    _bindGlobalEvents(triggerEvent) {\n        // Note that we bind the events to the `document`, because it allows us to capture\n        // drag cancel events where the user's pointer is outside the browser window.\n        const document = this._document;\n        const isTouch = isTouchEvent(triggerEvent);\n        const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n        const endEventName = isTouch ? 'touchend' : 'mouseup';\n        document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n        document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n        if (isTouch) {\n            document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        }\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.addEventListener('blur', this._windowBlur);\n        }\n    }\n    /** Removes any global event listeners that we may have added. */\n    _removeGlobalEvents() {\n        const document = this._document;\n        document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n        document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n        document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n        document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n        document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.removeEventListener('blur', this._windowBlur);\n        }\n    }\n    /** Increments the slider by the given number of steps (negative number decrements). */\n    _increment(numSteps) {\n        this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    }\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n    _updateValueFromPosition(pos) {\n        if (!this._sliderDimensions) {\n            return;\n        }\n        let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        let posComponent = this.vertical ? pos.y : pos.x;\n        // The exact value is calculated from the event and used to find the closest snap value.\n        let percent = this._clamp((posComponent - offset) / size);\n        if (this._shouldInvertMouseCoords()) {\n            percent = 1 - percent;\n        }\n        // Since the steps may not divide cleanly into the max value, if the user\n        // slid to 0 or 100 percent, we jump to the min/max value. This approach\n        // is slightly more intuitive than using `Math.ceil` below, because it\n        // follows the user's pointer closer.\n        if (percent === 0) {\n            this.value = this.min;\n        }\n        else if (percent === 1) {\n            this.value = this.max;\n        }\n        else {\n            const exactValue = this._calculateValue(percent);\n            // This calculation finds the closest step by finding the closest\n            // whole number divisible by the step relative to the min.\n            const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n            // The value needs to snap to the min and max.\n            this.value = this._clamp(closestValue, this.min, this.max);\n        }\n    }\n    /** Emits a change event if the current value is different from the last emitted value. */\n    _emitChangeEvent() {\n        this._controlValueAccessorChangeFn(this.value);\n        this.valueChange.emit(this.value);\n        this.change.emit(this._createChangeEvent());\n    }\n    /** Emits an input event when the current value is different from the last emitted value. */\n    _emitInputEvent() {\n        this.input.emit(this._createChangeEvent());\n    }\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n    _updateTickIntervalPercent() {\n        if (!this.tickInterval || !this._sliderDimensions) {\n            return;\n        }\n        if (this.tickInterval == 'auto') {\n            let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n            let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n            let pixelsPerTick = stepsPerTick * this.step;\n            this._tickIntervalPercent = pixelsPerTick / trackSize;\n        }\n        else {\n            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n        }\n    }\n    /** Creates a slider change object from the specified value. */\n    _createChangeEvent(value = this.value) {\n        let event = new MatSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n    }\n    /** Calculates the percentage of the slider that a value is. */\n    _calculatePercentage(value) {\n        return ((value || 0) - this.min) / (this.max - this.min);\n    }\n    /** Calculates the value a percentage of the slider corresponds to. */\n    _calculateValue(percentage) {\n        return this.min + percentage * (this.max - this.min);\n    }\n    /** Return a number between two numbers. */\n    _clamp(value, min = 0, max = 1) {\n        return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n    _getSliderDimensions() {\n        return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    }\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n    _focusHostElement(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Blurs the native element. */\n    _blurHostElement() {\n        this._elementRef.nativeElement.blur();\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n}\nMatSlider.ɵfac = function MatSlider_Factory(t) { return new (t || MatSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlider.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSlider, selectors: [[\"mat-slider\"]], viewQuery: function MatSlider_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n    } }, hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\", \"mat-focus-indicator\"], hostVars: 29, hostBindings: function MatSlider_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSlider_blur_HostBindingHandler() { return ctx._onBlur(); })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) { return ctx._onKeydown($event); })(\"keyup\", function MatSlider_keyup_HostBindingHandler() { return ctx._onKeyup(); })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() { return ctx._onMouseenter(); })(\"selectstart\", function MatSlider_selectstart_HostBindingHandler($event) { return $event.preventDefault(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-valuetext\", ctx.valueText == null ? ctx.displayValue : ctx.valueText)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._shouldInvertAxis())(\"mat-slider-invert-mouse-coords\", ctx._shouldInvertMouseCoords())(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue())(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue() && ctx._getThumbGap() && ctx._shouldInvertAxis())(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", color: \"color\", tabIndex: \"tabIndex\", invert: \"invert\", max: \"max\", min: \"min\", step: \"step\", thumbLabel: \"thumbLabel\", tickInterval: \"tickInterval\", value: \"value\", vertical: \"vertical\", displayWith: \"displayWith\", valueText: \"valueText\" }, outputs: { change: \"change\", input: \"input\", valueChange: \"valueChange\" }, exportAs: [\"matSlider\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 13, vars: 6, consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]], template: function MatSlider_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelement(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11);\n        ɵngcc0.ɵɵtext(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTrackBackgroundStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTrackFillStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTicksContainerStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTicksStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getThumbContainerStyles());\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵtextInterpolate(ctx.displayValue);\n    } }, directives: [ɵngcc3.NgStyle], styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{-webkit-print-color-adjust:exact;color-adjust:exact;position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{-webkit-background-clip:content-box;background-clip:content-box;background-repeat:repeat;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlider.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlider.propDecorators = {\n    invert: [{ type: Input }],\n    max: [{ type: Input }],\n    min: [{ type: Input }],\n    step: [{ type: Input }],\n    thumbLabel: [{ type: Input }],\n    tickInterval: [{ type: Input }],\n    value: [{ type: Input }],\n    displayWith: [{ type: Input }],\n    valueText: [{ type: Input }],\n    vertical: [{ type: Input }],\n    change: [{ type: Output }],\n    input: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    _sliderWrapper: [{ type: ViewChild, args: ['sliderWrapper',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlider, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slider',\n                exportAs: 'matSlider',\n                providers: [MAT_SLIDER_VALUE_ACCESSOR],\n                host: {\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                    '(keydown)': '_onKeydown($event)',\n                    '(keyup)': '_onKeyup()',\n                    '(mouseenter)': '_onMouseenter()',\n                    // On Safari starting to slide temporarily triggers text selection mode which\n                    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n                    '(selectstart)': '$event.preventDefault()',\n                    'class': 'mat-slider mat-focus-indicator',\n                    'role': 'slider',\n                    '[tabIndex]': 'tabIndex',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.aria-valuemax]': 'max',\n                    '[attr.aria-valuemin]': 'min',\n                    '[attr.aria-valuenow]': 'value',\n                    // NVDA and Jaws appear to announce the `aria-valuenow` by calculating its percentage based\n                    // on its value between `aria-valuemin` and `aria-valuemax`. Due to how decimals are handled,\n                    // it can cause the slider to read out a very long value like 0.20000068 if the current value\n                    // is 0.2 with a min of 0 and max of 1. We work around the issue by setting `aria-valuetext`\n                    // to the same value that we set on the slider's thumb which will be truncated.\n                    '[attr.aria-valuetext]': 'valueText == null ? displayValue : valueText',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-slider-disabled]': 'disabled',\n                    '[class.mat-slider-has-ticks]': 'tickInterval',\n                    '[class.mat-slider-horizontal]': '!vertical',\n                    '[class.mat-slider-axis-inverted]': '_shouldInvertAxis()',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if mouse coordinates need to be inverted.\n                    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n                    '[class.mat-slider-sliding]': '_isSliding',\n                    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                    '[class.mat-slider-vertical]': 'vertical',\n                    '[class.mat-slider-min-value]': '_isMinValue()',\n                    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue() && _getThumbGap() && _shouldInvertAxis()',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_getTrackBackgroundStyles()\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_getTrackFillStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_getTicksContainerStyles()\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_getTicksStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_getThumbContainerStyles()\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['disabled', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{-webkit-print-color-adjust:exact;color-adjust:exact;position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{-webkit-background-clip:content-box;background-clip:content-box;background-repeat:repeat;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { change: [{\n            type: Output\n        }], input: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], invert: [{\n            type: Input\n        }], max: [{\n            type: Input\n        }], min: [{\n            type: Input\n        }], step: [{\n            type: Input\n        }], thumbLabel: [{\n            type: Input\n        }], tickInterval: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], displayWith: [{\n            type: Input\n        }], valueText: [{\n            type: Input\n        }], _sliderWrapper: [{\n            type: ViewChild,\n            args: ['sliderWrapper']\n        }] }); })();\n/** Returns whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\nfunction getPointerPositionOnPage(event, id) {\n    let point;\n    if (isTouchEvent(event)) {\n        // The `identifier` could be undefined if the browser doesn't support `TouchEvent.identifier`.\n        // If that's the case, attribute the first touch to all active sliders. This should still cover\n        // the most common case while only breaking multi-touch.\n        if (typeof id === 'number') {\n            point = findMatchingTouch(event.touches, id) || findMatchingTouch(event.changedTouches, id);\n        }\n        else {\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            point = event.touches[0] || event.changedTouches[0];\n        }\n    }\n    else {\n        point = event;\n    }\n    return point ? { x: point.clientX, y: point.clientY } : undefined;\n}\n/** Finds a `Touch` with a specific ID in a `TouchList`. */\nfunction findMatchingTouch(touches, id) {\n    for (let i = 0; i < touches.length; i++) {\n        if (touches[i].identifier === id) {\n            return touches[i];\n        }\n    }\n    return undefined;\n}\n/** Gets the unique ID of a touch that matches a specific slider. */\nfunction getTouchIdForSlider(event, sliderHost) {\n    for (let i = 0; i < event.touches.length; i++) {\n        const target = event.touches[i].target;\n        if (sliderHost === target || sliderHost.contains(target)) {\n            return event.touches[i].identifier;\n        }\n    }\n    return undefined;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSliderModule {\n}\nMatSliderModule.ɵfac = function MatSliderModule_Factory(t) { return new (t || MatSliderModule)(); };\nMatSliderModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSliderModule });\nMatSliderModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSliderModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatSlider, MatCommonModule],\n                declarations: [MatSlider]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSliderModule, { declarations: function () { return [MatSlider]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatSlider, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };\n\n","import { CommonModule, CurrencyPipe, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { Route, RouterModule } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { DxDraggableModule, DxSchedulerModule, DxScrollViewModule, DxTemplateModule, } from 'devextreme-angular';\nimport { DxoScrollingModule } from 'devextreme-angular/ui/nested';\nimport { DirectiveModule } from 'src/app/helper/directive.module';\nimport { IconsModule } from 'src/app/icons.module';\nimport { VersionControlResolver } from 'src/app/resolvers/versionControl.resolver';\nimport { WidgetsModule } from 'src/app/widgets/chq-widgets.module';\nimport { BookingJournalComponent } from './booking-journal/booking-journal.component';\nimport { BookingMessageComponent } from './booking-message/booking-message.component';\nimport { BookingPreviewComponent } from './booking-preview/booking-preview.component';\n\nconst casesRoutes: Route[] = [\n  {\n    path: '',\n    component: BookingJournalComponent,\n    resolve: { version: VersionControlResolver }\n  }\n];\n\n@NgModule({\n  declarations: [\n    BookingJournalComponent,\n    BookingPreviewComponent,\n    BookingMessageComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatIconModule,\n    IconsModule,\n    RouterModule.forChild(casesRoutes),\n    MatMenuModule,\n    DxSchedulerModule,\n    DxTemplateModule,\n    DxDraggableModule,\n    DxScrollViewModule,\n    DxoScrollingModule,\n    WidgetsModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatDialogModule,\n    MatSlideToggleModule,\n    MatTooltipModule,\n    TranslateModule,\n    DirectiveModule\n  ],\n  providers: [\n    DatePipe,\n    CurrencyPipe\n  ]\n})\nexport class BookingJournalModule { }\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable require-jsdoc */\nimport { Component, Inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { ChqWidgetsButtonModel } from 'src/app/model/chq-widgets-button-model';\nimport { ChqWidgetsInputModel, IControlValue } from 'src/app/model/chq-widgets-input-model';\nimport { CommonService } from 'src/app/services/common/common.service';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'chr-booking-message',\n  templateUrl: './booking-message.component.html',\n  styleUrls: [ './booking-message.component.scss' ]\n})\nexport class BookingMessageComponent {\n\n  public messageForm = this.formBuilder.group({\n    Type: [ '', Validators.required ],\n    Email: [ '', Validators.required ],\n    Subject: [ '', Validators.required ],\n    Message: [ '', Validators.required ]\n  });\n\n  messageModal: ChqWidgetsInputModel[] = [\n    {\n      placeHolder: 'Type',\n      name: 'Type',\n      label: 'type',\n      value: '',\n      type: 'radio',\n      options: [\n        { label: 'Insurance', value: 'Insurance', checked: false },\n        { label: 'Driver', value: 'Driver', checked: false }\n      ]\n    },\n    {\n      placeHolder: 'Email Address',\n      label: 'email_address',\n      name: 'Email',\n      value: '',\n      type: 'text',\n      suffix: 'CC BCC'\n    },\n    {\n      placeHolder: 'Subject',\n      name: 'Subject',\n      label: 'subject',\n      value: '',\n      type: 'text'\n    },\n    {\n      placeHolder: 'Message',\n      name: 'Message',\n      label: 'message',\n      value: '',\n      type: 'textarea'\n    }\n  ];\n\n  public attachmentButton: ChqWidgetsButtonModel = {\n    label: 'add_attachment',\n    type: 'outline',\n    icon: 'attachment',\n    iconColor: 'black'\n  }\n\n  public sendButton: ChqWidgetsButtonModel = {\n    label: 'send',\n    type: this.messageForm.valid ? 'primary' : 'disabled',\n    icon: 'send',\n    iconColor: 'white'\n  }\n\n  constructor(\n    public dialogRef: MatDialogRef<BookingMessageComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private formBuilder: FormBuilder,\n    private commonService: CommonService\n  ) { }\n\n  onFormUpdate(output: IControlValue): void {\n    this.messageForm.get(output.name).setValue(output.value);\n  }\n\n  onSubmit(): void {\n    console.log(this.messageForm);\n  }\n}","<div class=\"booking-message-dialog dialog-with-header\">\n    <div class=\"header\">\n        <div class=\"title\">\n            {{ 'send_email' | translate }}\n        </div>\n        <div class=\"action\">\n            <button>\n                <mat-icon [svgIcon]=\"'cross'\" color=\"white\" [mat-dialog-close]=\"\"></mat-icon>\n            </button>\n        </div>\n    </div>\n\n    <mat-dialog-content class=\"mat-typography\">\n        <div class=\"booking-message-wrapper\">\n            <form class=\"form-container\" [formGroup]=\"messageForm\">\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <label class=\"info\">{{ 'email_message' | translate }}</label>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <label class=\"radio-label\">{{ 'type' | translate }}</label>\n                        <chq-input [inputModel]=\"messageModal[0]\" (controlOutput)=\"onFormUpdate($event)\"></chq-input>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12 email\">\n                        <chq-input [inputModel]=\"messageModal[1]\" (controlOutput)=\"onFormUpdate($event)\"></chq-input>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <chq-input [inputModel]=\"messageModal[2]\" (controlOutput)=\"onFormUpdate($event)\"></chq-input>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <div class=\"input-wrapper input-text\">\n                            <label class=\"input-label\">{{ 'message' | translate }}</label>\n                            <chq-rich-text-editor [height]=\"200\" [initialValue]=\"\"\n                                (currentValue)=\"$event.value\"></chq-rich-text-editor>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n        <div class=\"footer\">\n            <chq-button [buttonModel]=\"attachmentButton\" (click)=\"onSubmit()\"></chq-button>\n            <chq-button [buttonModel]=\"sendButton\" (click)=\"onSubmit()\"></chq-button>\n        </div>\n    </mat-dialog-content>\n</div>"]}