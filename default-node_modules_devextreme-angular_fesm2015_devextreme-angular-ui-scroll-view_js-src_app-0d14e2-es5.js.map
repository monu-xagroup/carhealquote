{"version":3,"mappings":"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","names":["DxScrollViewComponent","_inherits","_classCallCheck","_this","subscribe","emit","optionHost","_createClass","key","get","set","value","devextreme_ui_scroll_view__WEBPACK_IMPORTED_MODULE_0__","devextreme_angular_core__WEBPACK_IMPORTED_MODULE_1__","_angular_core__WEBPACK_IMPORTED_MODULE_2__","_angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__","type","selectors","inputs","bounceEnabled","direction","disabled","elementAttr","height","pulledDownText","pullingDownText","reachBottomText","refreshingText","rtlEnabled","scrollByContent","scrollByThumb","showScrollbar","useNative","width","outputs","onDisposing","onInitialized","onOptionChanged","onPullDown","onReachBottom","onScroll","onUpdated","bounceEnabledChange","directionChange","disabledChange","elementAttrChange","heightChange","pulledDownTextChange","pullingDownTextChange","reachBottomTextChange","refreshingTextChange","rtlEnabledChange","scrollByContentChange","scrollByThumbChange","showScrollbarChange","useNativeChange","widthChange","features","ngContentSelectors","decls","vars","template","encapsulation","args","selector","providers","decorators","DxScrollViewModule","imports","declarations","exports","VersionControlResolver","commonService","showLoading","checkVersion","pipe","res","_this2","hideLoading","localVersion","localStorage","getItem","appVersion","buildRevision","setItem","setTimeout","location","reload","factory","providedIn"],"sources":["webpack:///node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-scroll-view.js","webpack:///src/app/resolvers/versionControl.resolver.ts"],"sourcesContent":["import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxScrollView from 'devextreme/ui/scroll_view';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\n\n/*!\r\n * devextreme-angular\r\n * Version: 22.2.11\r\n * Build date: Fri Feb 09 2024\r\n *\r\n * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nconst _c0 = [\"*\"];\r\n/**\r\n * The ScrollView is a UI component that enables a user to scroll its content.\r\n\r\n */\r\nclass DxScrollViewComponent extends DxComponent {\r\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n        this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'pullDown', emit: 'onPullDown' },\r\n            { subscribe: 'reachBottom', emit: 'onReachBottom' },\r\n            { subscribe: 'scroll', emit: 'onScroll' },\r\n            { subscribe: 'updated', emit: 'onUpdated' },\r\n            { emit: 'bounceEnabledChange' },\r\n            { emit: 'directionChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'pulledDownTextChange' },\r\n            { emit: 'pullingDownTextChange' },\r\n            { emit: 'reachBottomTextChange' },\r\n            { emit: 'refreshingTextChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'scrollByContentChange' },\r\n            { emit: 'scrollByThumbChange' },\r\n            { emit: 'showScrollbarChange' },\r\n            { emit: 'useNativeChange' },\r\n            { emit: 'widthChange' }\r\n        ]);\r\n        optionHost.setHost(this);\r\n    }\r\n    /**\r\n     * A Boolean value specifying whether to enable or disable the bounce-back effect.\r\n    \r\n     */\r\n    get bounceEnabled() {\r\n        return this._getOption('bounceEnabled');\r\n    }\r\n    set bounceEnabled(value) {\r\n        this._setOption('bounceEnabled', value);\r\n    }\r\n    /**\r\n     * A string value specifying the available scrolling directions.\r\n    \r\n     */\r\n    get direction() {\r\n        return this._getOption('direction');\r\n    }\r\n    set direction(value) {\r\n        this._setOption('direction', value);\r\n    }\r\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\r\n    get disabled() {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value) {\r\n        this._setOption('disabled', value);\r\n    }\r\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\r\n    get elementAttr() {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\r\n    get height() {\r\n        return this._getOption('height');\r\n    }\r\n    set height(value) {\r\n        this._setOption('height', value);\r\n    }\r\n    /**\r\n     * Specifies the text shown in the pullDown panel when pulling the content down lowers the refresh threshold.\r\n    \r\n     */\r\n    get pulledDownText() {\r\n        return this._getOption('pulledDownText');\r\n    }\r\n    set pulledDownText(value) {\r\n        this._setOption('pulledDownText', value);\r\n    }\r\n    /**\r\n     * Specifies the text shown in the pullDown panel while pulling the content down to the refresh threshold.\r\n    \r\n     */\r\n    get pullingDownText() {\r\n        return this._getOption('pullingDownText');\r\n    }\r\n    set pullingDownText(value) {\r\n        this._setOption('pullingDownText', value);\r\n    }\r\n    /**\r\n     * Specifies the text shown in the pullDown panel displayed when content is scrolled to the bottom.\r\n    \r\n     */\r\n    get reachBottomText() {\r\n        return this._getOption('reachBottomText');\r\n    }\r\n    set reachBottomText(value) {\r\n        this._setOption('reachBottomText', value);\r\n    }\r\n    /**\r\n     * Specifies the text shown in the pullDown panel displayed when the content is being refreshed.\r\n    \r\n     */\r\n    get refreshingText() {\r\n        return this._getOption('refreshingText');\r\n    }\r\n    set refreshingText(value) {\r\n        this._setOption('refreshingText', value);\r\n    }\r\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\r\n    get rtlEnabled() {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n    /**\r\n     * A Boolean value specifying whether or not an end user can scroll the UI component content swiping it up or down. Applies only if useNative is false\r\n    \r\n     */\r\n    get scrollByContent() {\r\n        return this._getOption('scrollByContent');\r\n    }\r\n    set scrollByContent(value) {\r\n        this._setOption('scrollByContent', value);\r\n    }\r\n    /**\r\n     * Specifies whether a user can scroll the content with the scrollbar. Applies only if useNative is false.\r\n    \r\n     */\r\n    get scrollByThumb() {\r\n        return this._getOption('scrollByThumb');\r\n    }\r\n    set scrollByThumb(value) {\r\n        this._setOption('scrollByThumb', value);\r\n    }\r\n    /**\r\n     * Specifies when the UI component shows the scrollbar.\r\n    \r\n     */\r\n    get showScrollbar() {\r\n        return this._getOption('showScrollbar');\r\n    }\r\n    set showScrollbar(value) {\r\n        this._setOption('showScrollbar', value);\r\n    }\r\n    /**\r\n     * Indicates whether to use native or simulated scrolling.\r\n    \r\n     */\r\n    get useNative() {\r\n        return this._getOption('useNative');\r\n    }\r\n    set useNative(value) {\r\n        this._setOption('useNative', value);\r\n    }\r\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\r\n    get width() {\r\n        return this._getOption('width');\r\n    }\r\n    set width(value) {\r\n        this._setOption('width', value);\r\n    }\r\n    _createInstance(element, options) {\r\n        return new DxScrollView(element, options);\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n}\r\n/** @nocollapse */ DxScrollViewComponent.ɵfac = function DxScrollViewComponent_Factory(t) { return new (t || DxScrollViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID)); };\r\n/** @nocollapse */ DxScrollViewComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: DxScrollViewComponent, selectors: [[\"dx-scroll-view\"]], inputs: { bounceEnabled: \"bounceEnabled\", direction: \"direction\", disabled: \"disabled\", elementAttr: \"elementAttr\", height: \"height\", pulledDownText: \"pulledDownText\", pullingDownText: \"pullingDownText\", reachBottomText: \"reachBottomText\", refreshingText: \"refreshingText\", rtlEnabled: \"rtlEnabled\", scrollByContent: \"scrollByContent\", scrollByThumb: \"scrollByThumb\", showScrollbar: \"showScrollbar\", useNative: \"useNative\", width: \"width\" }, outputs: { onDisposing: \"onDisposing\", onInitialized: \"onInitialized\", onOptionChanged: \"onOptionChanged\", onPullDown: \"onPullDown\", onReachBottom: \"onReachBottom\", onScroll: \"onScroll\", onUpdated: \"onUpdated\", bounceEnabledChange: \"bounceEnabledChange\", directionChange: \"directionChange\", disabledChange: \"disabledChange\", elementAttrChange: \"elementAttrChange\", heightChange: \"heightChange\", pulledDownTextChange: \"pulledDownTextChange\", pullingDownTextChange: \"pullingDownTextChange\", reachBottomTextChange: \"reachBottomTextChange\", refreshingTextChange: \"refreshingTextChange\", rtlEnabledChange: \"rtlEnabledChange\", scrollByContentChange: \"scrollByContentChange\", scrollByThumbChange: \"scrollByThumbChange\", showScrollbarChange: \"showScrollbarChange\", useNativeChange: \"useNativeChange\", widthChange: \"widthChange\" }, features: [i0.ɵɵProvidersFeature([\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost\r\n        ]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxScrollViewComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵprojectionDef();\r\n        i0.ɵɵprojection(0);\r\n    } }, encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DxScrollViewComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'dx-scroll-view',\r\n                template: '<ng-content></ng-content>',\r\n                providers: [\r\n                    DxTemplateHost,\r\n                    WatcherHelper,\r\n                    NestedOptionHost\r\n                ]\r\n            }]\r\n    }], function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.DxTemplateHost }, { type: i1.WatcherHelper }, { type: i1.NestedOptionHost }, { type: i2.TransferState }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }]; }, { bounceEnabled: [{\r\n            type: Input\r\n        }], direction: [{\r\n            type: Input\r\n        }], disabled: [{\r\n            type: Input\r\n        }], elementAttr: [{\r\n            type: Input\r\n        }], height: [{\r\n            type: Input\r\n        }], pulledDownText: [{\r\n            type: Input\r\n        }], pullingDownText: [{\r\n            type: Input\r\n        }], reachBottomText: [{\r\n            type: Input\r\n        }], refreshingText: [{\r\n            type: Input\r\n        }], rtlEnabled: [{\r\n            type: Input\r\n        }], scrollByContent: [{\r\n            type: Input\r\n        }], scrollByThumb: [{\r\n            type: Input\r\n        }], showScrollbar: [{\r\n            type: Input\r\n        }], useNative: [{\r\n            type: Input\r\n        }], width: [{\r\n            type: Input\r\n        }], onDisposing: [{\r\n            type: Output\r\n        }], onInitialized: [{\r\n            type: Output\r\n        }], onOptionChanged: [{\r\n            type: Output\r\n        }], onPullDown: [{\r\n            type: Output\r\n        }], onReachBottom: [{\r\n            type: Output\r\n        }], onScroll: [{\r\n            type: Output\r\n        }], onUpdated: [{\r\n            type: Output\r\n        }], bounceEnabledChange: [{\r\n            type: Output\r\n        }], directionChange: [{\r\n            type: Output\r\n        }], disabledChange: [{\r\n            type: Output\r\n        }], elementAttrChange: [{\r\n            type: Output\r\n        }], heightChange: [{\r\n            type: Output\r\n        }], pulledDownTextChange: [{\r\n            type: Output\r\n        }], pullingDownTextChange: [{\r\n            type: Output\r\n        }], reachBottomTextChange: [{\r\n            type: Output\r\n        }], refreshingTextChange: [{\r\n            type: Output\r\n        }], rtlEnabledChange: [{\r\n            type: Output\r\n        }], scrollByContentChange: [{\r\n            type: Output\r\n        }], scrollByThumbChange: [{\r\n            type: Output\r\n        }], showScrollbarChange: [{\r\n            type: Output\r\n        }], useNativeChange: [{\r\n            type: Output\r\n        }], widthChange: [{\r\n            type: Output\r\n        }] }); })();\r\nclass DxScrollViewModule {\r\n}\r\n/** @nocollapse */ DxScrollViewModule.ɵfac = function DxScrollViewModule_Factory(t) { return new (t || DxScrollViewModule)(); };\r\n/** @nocollapse */ DxScrollViewModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: DxScrollViewModule });\r\n/** @nocollapse */ DxScrollViewModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({ imports: [[\r\n            DxIntegrationModule,\r\n            DxTemplateModule,\r\n            BrowserTransferStateModule\r\n        ], DxTemplateModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DxScrollViewModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [\r\n                    DxIntegrationModule,\r\n                    DxTemplateModule,\r\n                    BrowserTransferStateModule\r\n                ],\r\n                declarations: [\r\n                    DxScrollViewComponent\r\n                ],\r\n                exports: [\r\n                    DxScrollViewComponent,\r\n                    DxTemplateModule\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxScrollViewModule, { declarations: [DxScrollViewComponent], imports: [DxIntegrationModule,\r\n        DxTemplateModule,\r\n        BrowserTransferStateModule], exports: [DxScrollViewComponent, DxTemplateModule] }); })();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxScrollViewComponent, DxScrollViewModule };\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\n\nimport { catchError, map, Observable, of } from 'rxjs';\nimport { CommonService } from '../services/common/common.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VersionControlResolver implements Resolve<Observable<any>> {\n  /**\n   * contructor\n   * @param commonService \n   */\n  constructor(private commonService: CommonService) { }\n  /**\n   * resolve the \n   * @returns \n   */\n  resolve(): Observable<any> {\n    this.commonService.showLoading();\n    return this.commonService.checkVersion().pipe(\n      map((res) => {\n        this.commonService.hideLoading();\n        const localVersion = localStorage.getItem('appVersion');\n        const appVersion = res.buildRevision;\n        if (localVersion && localVersion != appVersion) {\n          localStorage.setItem('appVersion', appVersion);\n          setTimeout(() => {\n            location.reload();\n          }, 10);\n          return of('new version available');\n        } else {\n          localStorage.setItem('appVersion', appVersion);\n          return of('new version is not available');\n        }\n      }),\n      catchError(() => {\n        this.commonService.hideLoading();\n        return of('data not available at this time');\n      })\n    )\n  }\n}"]}