{"version":3,"mappings":"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","names":["DxDraggableComponent","subscribe","emit","optionHost","devextreme_ui_draggable__WEBPACK_IMPORTED_MODULE_0__","element","options","devextreme_angular_core__WEBPACK_IMPORTED_MODULE_1__","_angular_core__WEBPACK_IMPORTED_MODULE_2__","_angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__","type","selectors","inputs","autoScroll","boundary","clone","container","cursorOffset","data","dragDirection","dragTemplate","elementAttr","group","handle","height","rtlEnabled","scrollSensitivity","scrollSpeed","width","outputs","onDisposing","onDragEnd","onDragMove","onDragStart","onInitialized","onOptionChanged","autoScrollChange","boundaryChange","cloneChange","containerChange","cursorOffsetChange","dataChange","dragDirectionChange","dragTemplateChange","elementAttrChange","groupChange","handleChange","heightChange","rtlEnabledChange","scrollSensitivityChange","scrollSpeedChange","widthChange","features","ngContentSelectors","decls","vars","template","encapsulation","args","selector","providers","decorators","DxDraggableModule","imports","devextreme_angular_ui_nested__WEBPACK_IMPORTED_MODULE_4__","declarations","exports","_localization_core__WEBPACK_IMPORTED_MODULE_0__","_localization_message__WEBPACK_IMPORTED_MODULE_1__","_localization_number__WEBPACK_IMPORTED_MODULE_2__","_localization_date__WEBPACK_IMPORTED_MODULE_3__"],"sources":["webpack:///node_modules/devextreme-angular/fesm2015/devextreme-angular-ui-draggable.js","webpack:///node_modules/devextreme/esm/localization.js"],"sourcesContent":["import * as i2 from '@angular/platform-browser';\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport DxDraggable from 'devextreme/ui/draggable';\nimport * as i1 from 'devextreme-angular/core';\nimport { DxComponent, DxTemplateHost, WatcherHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoCursorOffsetModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 22.2.8\r\n * Build date: Thu Aug 31 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nconst _c0 = [\"*\"];\r\n/**\r\n * Draggable is a user interface utility that allows UI component elements to be dragged and dropped.\r\n\r\n */\r\nclass DxDraggableComponent extends DxComponent {\r\n    constructor(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n        this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'dragEnd', emit: 'onDragEnd' },\r\n            { subscribe: 'dragMove', emit: 'onDragMove' },\r\n            { subscribe: 'dragStart', emit: 'onDragStart' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { emit: 'autoScrollChange' },\r\n            { emit: 'boundaryChange' },\r\n            { emit: 'cloneChange' },\r\n            { emit: 'containerChange' },\r\n            { emit: 'cursorOffsetChange' },\r\n            { emit: 'dataChange' },\r\n            { emit: 'dragDirectionChange' },\r\n            { emit: 'dragTemplateChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'groupChange' },\r\n            { emit: 'handleChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'scrollSensitivityChange' },\r\n            { emit: 'scrollSpeedChange' },\r\n            { emit: 'widthChange' }\r\n        ]);\r\n        optionHost.setHost(this);\r\n    }\r\n    /**\r\n     * Enables automatic scrolling while dragging an item beyond the viewport.\r\n    \r\n     */\r\n    get autoScroll() {\r\n        return this._getOption('autoScroll');\r\n    }\r\n    set autoScroll(value) {\r\n        this._setOption('autoScroll', value);\r\n    }\r\n    /**\r\n     * Specifies a DOM element that limits the dragging area.\r\n    \r\n     */\r\n    get boundary() {\r\n        return this._getOption('boundary');\r\n    }\r\n    set boundary(value) {\r\n        this._setOption('boundary', value);\r\n    }\r\n    /**\r\n     * Allows a user to drag clones of items instead of actual items.\r\n    \r\n     */\r\n    get clone() {\r\n        return this._getOption('clone');\r\n    }\r\n    set clone(value) {\r\n        this._setOption('clone', value);\r\n    }\r\n    /**\r\n     * Specifies a custom container in which the draggable item should be rendered.\r\n    \r\n     */\r\n    get container() {\r\n        return this._getOption('container');\r\n    }\r\n    set container(value) {\r\n        this._setOption('container', value);\r\n    }\r\n    /**\r\n     * Specifies the cursor offset from the dragged item.\r\n    \r\n     */\r\n    get cursorOffset() {\r\n        return this._getOption('cursorOffset');\r\n    }\r\n    set cursorOffset(value) {\r\n        this._setOption('cursorOffset', value);\r\n    }\r\n    /**\r\n     * A container for custom data.\r\n    \r\n     */\r\n    get data() {\r\n        return this._getOption('data');\r\n    }\r\n    set data(value) {\r\n        this._setOption('data', value);\r\n    }\r\n    /**\r\n     * Specifies the directions in which an item can be dragged.\r\n    \r\n     */\r\n    get dragDirection() {\r\n        return this._getOption('dragDirection');\r\n    }\r\n    set dragDirection(value) {\r\n        this._setOption('dragDirection', value);\r\n    }\r\n    /**\r\n     * Specifies custom markup to be shown instead of the item being dragged.\r\n    \r\n     */\r\n    get dragTemplate() {\r\n        return this._getOption('dragTemplate');\r\n    }\r\n    set dragTemplate(value) {\r\n        this._setOption('dragTemplate', value);\r\n    }\r\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\r\n    get elementAttr() {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n    /**\r\n     * Allows you to group several UI components, so that users can drag and drop items between them.\r\n    \r\n     */\r\n    get group() {\r\n        return this._getOption('group');\r\n    }\r\n    set group(value) {\r\n        this._setOption('group', value);\r\n    }\r\n    /**\r\n     * Specifies a CSS selector (ID or class) that should act as the drag handle(s) for the item(s).\r\n    \r\n     */\r\n    get handle() {\r\n        return this._getOption('handle');\r\n    }\r\n    set handle(value) {\r\n        this._setOption('handle', value);\r\n    }\r\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\r\n    get height() {\r\n        return this._getOption('height');\r\n    }\r\n    set height(value) {\r\n        this._setOption('height', value);\r\n    }\r\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\r\n    get rtlEnabled() {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n    /**\r\n     * Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if autoScroll is true.\r\n    \r\n     */\r\n    get scrollSensitivity() {\r\n        return this._getOption('scrollSensitivity');\r\n    }\r\n    set scrollSensitivity(value) {\r\n        this._setOption('scrollSensitivity', value);\r\n    }\r\n    /**\r\n     * Specifies the scrolling speed when dragging an item beyond the viewport. Applies only if autoScroll is true.\r\n    \r\n     */\r\n    get scrollSpeed() {\r\n        return this._getOption('scrollSpeed');\r\n    }\r\n    set scrollSpeed(value) {\r\n        this._setOption('scrollSpeed', value);\r\n    }\r\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\r\n    get width() {\r\n        return this._getOption('width');\r\n    }\r\n    set width(value) {\r\n        this._setOption('width', value);\r\n    }\r\n    _createInstance(element, options) {\r\n        return new DxDraggable(element, options);\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n}\r\n/** @nocollapse */ DxDraggableComponent.ɵfac = function DxDraggableComponent_Factory(t) { return new (t || DxDraggableComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.DxTemplateHost), i0.ɵɵdirectiveInject(i1.WatcherHelper), i0.ɵɵdirectiveInject(i1.NestedOptionHost), i0.ɵɵdirectiveInject(i2.TransferState), i0.ɵɵdirectiveInject(PLATFORM_ID)); };\r\n/** @nocollapse */ DxDraggableComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: DxDraggableComponent, selectors: [[\"dx-draggable\"]], inputs: { autoScroll: \"autoScroll\", boundary: \"boundary\", clone: \"clone\", container: \"container\", cursorOffset: \"cursorOffset\", data: \"data\", dragDirection: \"dragDirection\", dragTemplate: \"dragTemplate\", elementAttr: \"elementAttr\", group: \"group\", handle: \"handle\", height: \"height\", rtlEnabled: \"rtlEnabled\", scrollSensitivity: \"scrollSensitivity\", scrollSpeed: \"scrollSpeed\", width: \"width\" }, outputs: { onDisposing: \"onDisposing\", onDragEnd: \"onDragEnd\", onDragMove: \"onDragMove\", onDragStart: \"onDragStart\", onInitialized: \"onInitialized\", onOptionChanged: \"onOptionChanged\", autoScrollChange: \"autoScrollChange\", boundaryChange: \"boundaryChange\", cloneChange: \"cloneChange\", containerChange: \"containerChange\", cursorOffsetChange: \"cursorOffsetChange\", dataChange: \"dataChange\", dragDirectionChange: \"dragDirectionChange\", dragTemplateChange: \"dragTemplateChange\", elementAttrChange: \"elementAttrChange\", groupChange: \"groupChange\", handleChange: \"handleChange\", heightChange: \"heightChange\", rtlEnabledChange: \"rtlEnabledChange\", scrollSensitivityChange: \"scrollSensitivityChange\", scrollSpeedChange: \"scrollSpeedChange\", widthChange: \"widthChange\" }, features: [i0.ɵɵProvidersFeature([\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost\r\n        ]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxDraggableComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵprojectionDef();\r\n        i0.ɵɵprojection(0);\r\n    } }, encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DxDraggableComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'dx-draggable',\r\n                template: '<ng-content></ng-content>',\r\n                providers: [\r\n                    DxTemplateHost,\r\n                    WatcherHelper,\r\n                    NestedOptionHost\r\n                ]\r\n            }]\r\n    }], function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.DxTemplateHost }, { type: i1.WatcherHelper }, { type: i1.NestedOptionHost }, { type: i2.TransferState }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }]; }, { autoScroll: [{\r\n            type: Input\r\n        }], boundary: [{\r\n            type: Input\r\n        }], clone: [{\r\n            type: Input\r\n        }], container: [{\r\n            type: Input\r\n        }], cursorOffset: [{\r\n            type: Input\r\n        }], data: [{\r\n            type: Input\r\n        }], dragDirection: [{\r\n            type: Input\r\n        }], dragTemplate: [{\r\n            type: Input\r\n        }], elementAttr: [{\r\n            type: Input\r\n        }], group: [{\r\n            type: Input\r\n        }], handle: [{\r\n            type: Input\r\n        }], height: [{\r\n            type: Input\r\n        }], rtlEnabled: [{\r\n            type: Input\r\n        }], scrollSensitivity: [{\r\n            type: Input\r\n        }], scrollSpeed: [{\r\n            type: Input\r\n        }], width: [{\r\n            type: Input\r\n        }], onDisposing: [{\r\n            type: Output\r\n        }], onDragEnd: [{\r\n            type: Output\r\n        }], onDragMove: [{\r\n            type: Output\r\n        }], onDragStart: [{\r\n            type: Output\r\n        }], onInitialized: [{\r\n            type: Output\r\n        }], onOptionChanged: [{\r\n            type: Output\r\n        }], autoScrollChange: [{\r\n            type: Output\r\n        }], boundaryChange: [{\r\n            type: Output\r\n        }], cloneChange: [{\r\n            type: Output\r\n        }], containerChange: [{\r\n            type: Output\r\n        }], cursorOffsetChange: [{\r\n            type: Output\r\n        }], dataChange: [{\r\n            type: Output\r\n        }], dragDirectionChange: [{\r\n            type: Output\r\n        }], dragTemplateChange: [{\r\n            type: Output\r\n        }], elementAttrChange: [{\r\n            type: Output\r\n        }], groupChange: [{\r\n            type: Output\r\n        }], handleChange: [{\r\n            type: Output\r\n        }], heightChange: [{\r\n            type: Output\r\n        }], rtlEnabledChange: [{\r\n            type: Output\r\n        }], scrollSensitivityChange: [{\r\n            type: Output\r\n        }], scrollSpeedChange: [{\r\n            type: Output\r\n        }], widthChange: [{\r\n            type: Output\r\n        }] }); })();\r\nclass DxDraggableModule {\r\n}\r\n/** @nocollapse */ DxDraggableModule.ɵfac = function DxDraggableModule_Factory(t) { return new (t || DxDraggableModule)(); };\r\n/** @nocollapse */ DxDraggableModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: DxDraggableModule });\r\n/** @nocollapse */ DxDraggableModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({ imports: [[\r\n            DxoCursorOffsetModule,\r\n            DxIntegrationModule,\r\n            DxTemplateModule,\r\n            BrowserTransferStateModule\r\n        ], DxoCursorOffsetModule,\r\n        DxTemplateModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DxDraggableModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [\r\n                    DxoCursorOffsetModule,\r\n                    DxIntegrationModule,\r\n                    DxTemplateModule,\r\n                    BrowserTransferStateModule\r\n                ],\r\n                declarations: [\r\n                    DxDraggableComponent\r\n                ],\r\n                exports: [\r\n                    DxDraggableComponent,\r\n                    DxoCursorOffsetModule,\r\n                    DxTemplateModule\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxDraggableModule, { declarations: [DxDraggableComponent], imports: [DxoCursorOffsetModule,\r\n        DxIntegrationModule,\r\n        DxTemplateModule,\r\n        BrowserTransferStateModule], exports: [DxDraggableComponent, DxoCursorOffsetModule,\r\n        DxTemplateModule] }); })();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxDraggableComponent, DxDraggableModule };\n","/**\r\n * DevExtreme (esm/localization.js)\r\n * Version: 22.2.8\r\n * Build date: Thu Aug 31 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport core from \"./localization/core\";\r\nimport message from \"./localization/message\";\r\nimport number from \"./localization/number\";\r\nimport date from \"./localization/date\";\r\nimport \"./localization/currency\";\r\nexport var locale = core.locale.bind(core);\r\nexport var loadMessages = message.load.bind(message);\r\nexport var formatMessage = message.format.bind(message);\r\nexport var formatNumber = number.format.bind(number);\r\nexport var parseNumber = number.parse.bind(number);\r\nexport var formatDate = date.format.bind(date);\r\nexport var parseDate = date.parse.bind(date);\r\nexport {\r\n    message,\r\n    number,\r\n    date\r\n};\r\nexport function disableIntl() {\r\n    if (\"intl\" === number.engine()) {\r\n        number.resetInjection()\r\n    }\r\n    if (\"intl\" === date.engine()) {\r\n        date.resetInjection()\r\n    }\r\n}\r\n"]}