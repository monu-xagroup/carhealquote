{"version":3,"file":"src_app_modules_repair_workflow_workflow_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAC+C;AACgB;AACH;AACN;AACY;AACA;AACiB;AAC7B;AACsB;AACpB;AACC;;;AAEzD,MAAMY,cAAc,GAAY,CAC9B;EACEC,IAAI,EAAE,EAAE;EACRC,SAAS,EAAER,2EAAiB;EAC5BS,OAAO,EAAE;IAAEC,OAAO,EAAET,6FAAsBA;EAAA;CAC3C,CACF;AAmBK,MAAOU,cAAc;EAAA;qBAAdA,cAAc;EAAA;EAAA;UAAdA;EAAc;EAAA;cAZvBjB,yDAAY,EACZC,yEAAa,EACbC,sEAAY,EACZC,kEAAqB,CAACS,cAAc,CAAC,EACrCR,wDAAW,EACXC,gEAAmB,EACnBG,iEAAe,EACfC,sFAAe,EACfC,kEAAU,EACVC,mEAAc;EAAA;;;sHAGLM,cAAc;IAAAE,eAfvBb,2EAAiB;IAAAc,UAGjBpB,yDAAY,EACZC,yEAAa,EACbC,sEAAY,6DAEZE,wDAAW,EACXC,gEAAmB,EACnBG,iEAAe,EACfC,sFAAe,EACfC,kEAAU,EACVC,mEAAc;EAAA;AAAA;;;;;;;;;;;;;;;;;;;AChCqC;;;AAMjD,MAAOJ,sBAAsB;EACjC;;;;EAIAiB,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;EAAmB;EACpD;;;;EAIAV,OAAO;IACL,IAAI,CAACU,aAAa,CAACC,WAAW,EAAE;IAChC,OAAO,IAAI,CAACD,aAAa,CAACE,YAAY,EAAE,CAACC,IAAI,CAC3CN,yCAAG,CAAEO,GAAG,IAAI;MACV,IAAI,CAACJ,aAAa,CAACK,WAAW,EAAE;MAChC,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MACvD,MAAMC,UAAU,GAAGL,GAAG,CAACM,aAAa;MACpC,IAAIJ,YAAY,IAAIA,YAAY,IAAIG,UAAU,EAAE;QAC9CF,YAAY,CAACI,OAAO,CAAC,YAAY,EAAEF,UAAU,CAAC;QAC9CG,UAAU,CAAC,MAAK;UACdC,QAAQ,CAACC,MAAM,EAAE;QACnB,CAAC,EAAE,EAAE,CAAC;QACN,OAAOhB,wCAAE,CAAC,uBAAuB,CAAC;OACnC,MAAM;QACLS,YAAY,CAACI,OAAO,CAAC,YAAY,EAAEF,UAAU,CAAC;QAC9C,OAAOX,wCAAE,CAAC,8BAA8B,CAAC;;IAE7C,CAAC,CAAC,EACFF,gDAAU,CAAC,MAAK;MACd,IAAI,CAACI,aAAa,CAACK,WAAW,EAAE;MAChC,OAAOP,wCAAE,CAAC,iCAAiC,CAAC;IAC9C,CAAC,CAAC,CACH;EACH;EAAC;qBAjCUhB,sBAAsB;EAAA;EAAA;WAAtBA,sBAAsB;IAAAiC,SAAtBjC,sBAAsB;IAAAkC,YAFrB;EAAM","sources":["./src/app/modules/repair/workflow/workflow.module.ts","./src/app/resolvers/versionControl.resolver.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WidgetsModule } from 'src/app/widgets/widgets.module';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { Route, RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { WorkflowComponent } from './workflow/workflow.component';\r\nimport { VersionControlResolver } from 'src/app/resolvers/versionControl.resolver';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { DirectiveModule } from 'src/app/helper/directive/directive.module';\r\nimport { PipeModule } from 'src/app/helper/pipe.module';\r\nimport { MaterialModule } from 'src/app/material.module';\r\n\r\nconst workflowRoutes: Route[] = [\r\n  {\r\n    path: '',\r\n    component: WorkflowComponent,\r\n    resolve: { version: VersionControlResolver }\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    WorkflowComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    WidgetsModule,\r\n    SharedModule,\r\n    RouterModule.forChild(workflowRoutes),\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    TranslateModule,\r\n    DirectiveModule,\r\n    PipeModule,\r\n    MaterialModule\r\n  ]\r\n})\r\nexport class WorkflowModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { Resolve } from '@angular/router';\r\n\r\nimport { catchError, map, Observable, of } from 'rxjs';\r\nimport { CommonService } from '../services/common/common.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VersionControlResolver implements Resolve<Observable<any>> {\r\n  /**\r\n   * contructor\r\n   * @param commonService \r\n   */\r\n  constructor(private commonService: CommonService) { }\r\n  /**\r\n   * resolve the \r\n   * @returns \r\n   */\r\n  resolve(): Observable<any> {\r\n    this.commonService.showLoading();\r\n    return this.commonService.checkVersion().pipe(\r\n      map((res) => {\r\n        this.commonService.hideLoading();\r\n        const localVersion = localStorage.getItem('appVersion');\r\n        const appVersion = res.buildRevision;\r\n        if (localVersion && localVersion != appVersion) {\r\n          localStorage.setItem('appVersion', appVersion);\r\n          setTimeout(() => {\r\n            location.reload();\r\n          }, 10);\r\n          return of('new version available');\r\n        } else {\r\n          localStorage.setItem('appVersion', appVersion);\r\n          return of('new version is not available');\r\n        }\r\n      }),\r\n      catchError(() => {\r\n        this.commonService.hideLoading();\r\n        return of('data not available at this time');\r\n      })\r\n    )\r\n  }\r\n}"],"names":["CommonModule","WidgetsModule","SharedModule","RouterModule","FormsModule","ReactiveFormsModule","WorkflowComponent","VersionControlResolver","TranslateModule","DirectiveModule","PipeModule","MaterialModule","workflowRoutes","path","component","resolve","version","WorkflowModule","forChild","declarations","imports","catchError","map","of","constructor","commonService","showLoading","checkVersion","pipe","res","hideLoading","localVersion","localStorage","getItem","appVersion","buildRevision","setItem","setTimeout","location","reload","factory","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}