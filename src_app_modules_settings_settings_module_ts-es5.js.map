{"version":3,"mappings":"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","names":["OperationsLayoutComponent","router","settingsService","_classCallCheck","src_app_model_menu__WEBPACK_IMPORTED_MODULE_0__","_createClass","key","value","isRepairChange","subscribe","isRepair","_this","menuItems","ele","url","disabled","isJobTasksEnabled","isEnabled","item","navigate","selectors","decls","vars","consts","template","_angular_core__WEBPACK_IMPORTED_MODULE_3__","ctx","settingsRoutes","path","component","_operations_operations_layout_operations_layout_component__WEBPACK_IMPORTED_MODULE_0__","loadChildren","Promise","then","m","OperationsModule","resolve","version","src_app_resolvers_versionControl_resolver__WEBPACK_IMPORTED_MODULE_2__","EmployeeModule","SettingsModule","_angular_common__WEBPACK_IMPORTED_MODULE_4__","src_app_shared_shared_module__WEBPACK_IMPORTED_MODULE_1__","_angular_router__WEBPACK_IMPORTED_MODULE_5__","_ngx_translate_core__WEBPACK_IMPORTED_MODULE_6__","imports","VersionControlResolver","commonService","showLoading","checkVersion","pipe","res","_this2","hideLoading","localVersion","localStorage","getItem","appVersion","buildRevision","setItem","setTimeout","location","reload","factory","providedIn"],"sources":["webpack:///src/app/modules/settings/operations/operations-layout/operations-layout.component.ts","webpack:///src/app/modules/settings/operations/operations-layout/operations-layout.component.html","webpack:///src/app/modules/settings/settings.module.ts","webpack:///src/app/resolvers/versionControl.resolver.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { menuItem, operationsMenus } from 'src/app/model/menu';\nimport { SettingsService } from 'src/app/services/settings/settings.service';\n\n@Component({\n  selector: 'app-operations-layout',\n  templateUrl: './operations-layout.component.html',\n  styleUrls: [ './operations-layout.component.scss' ]\n})\nexport class OperationsLayoutComponent implements OnInit {\n\n  menuItems = operationsMenus;\n  /**\n   * constructor\n   * @param router \n   */\n  constructor(\n    private router: Router,\n    private settingsService: SettingsService,\n  ) { }\n\n  /**\n   * on init \n   */\n  ngOnInit(): void {\n    this.settingsService.isRepairChange.subscribe((isRepair: boolean) => {\n      this.menuItems =\n        operationsMenus.map((ele) => {\n          if (ele.url === '/settings/repair-type') ele.disabled = !isRepair;\n          return ele\n        })\n    });\n    this.settingsService.isJobTasksEnabled.subscribe((isEnabled: boolean) => {\n      this.menuItems =\n        operationsMenus.map((ele) => {\n          if (ele.url === '/settings/jobs-tasks') ele.disabled = !isEnabled;\n          return ele\n        })\n    });\n\n  }\n\n  /**\n   * navigate to selected route\n   * @param item \n   */\n  navigate(item: menuItem): void {\n    const url = item.url;\n    {\n      this.router.navigate([ url ]);\n    }\n  }\n}\n","<div class=\"layout-container\">\n    <div class=\"tab-header fx-0\">\n        <chq-tabs [menuItems]=\"menuItems\" (menuItemClick)=\"navigate($event);\" class=\"tabs\"></chq-tabs>\n    </div>\n    <div class=\"tab-content mh-0 fx-1\">\n        <router-outlet></router-outlet>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Route, RouterModule } from '@angular/router';\nimport { OperationsLayoutComponent } from './operations/operations-layout/operations-layout.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { VersionControlResolver } from 'src/app/resolvers/versionControl.resolver';\nimport { TranslateModule } from '@ngx-translate/core';\n\nconst settingsRoutes: Route[] = [\n  {\n    path: '',\n    component: OperationsLayoutComponent,\n    loadChildren: () =>\n      import('../settings/operations/operations.module').then(\n        m => m.OperationsModule\n      )\n  },\n  {\n    path: 'employees',\n    resolve: { version: VersionControlResolver },\n    loadChildren: () =>\n      import('../settings/employee/employee.module').then(\n        m => m.EmployeeModule\n      )\n  },\n]\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule.forChild(settingsRoutes),\n    TranslateModule\n  ]\n})\nexport class SettingsModule { }\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\n\nimport { catchError, map, Observable, of } from 'rxjs';\nimport { CommonService } from '../services/common/common.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VersionControlResolver implements Resolve<Observable<any>> {\n  /**\n   * contructor\n   * @param commonService \n   */\n  constructor(private commonService: CommonService) { }\n  /**\n   * resolve the \n   * @returns \n   */\n  resolve(): Observable<any> {\n    this.commonService.showLoading();\n    return this.commonService.checkVersion().pipe(\n      map((res) => {\n        this.commonService.hideLoading();\n        const localVersion = localStorage.getItem('appVersion');\n        const appVersion = res.buildRevision;\n        if (localVersion && localVersion != appVersion) {\n          localStorage.setItem('appVersion', appVersion);\n          setTimeout(() => {\n            location.reload();\n          }, 10);\n          return of('new version available');\n        } else {\n          localStorage.setItem('appVersion', appVersion);\n          return of('new version is not available');\n        }\n      }),\n      catchError(() => {\n        this.commonService.hideLoading();\n        return of('data not available at this time');\n      })\n    )\n  }\n}"]}