{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MASA,IAAMA,WAAW,GAAY,CAC3B;QACEC,IAAI,EAAE,EAAE;QACRC,SAAS,EAAEC,8FAAsB;QACjCC,OAAO,EAAE;UAAEC,OAAO,EAAEC;QAAsB;OAC3C,CACF;MAAC,IAYWC,eAAc;QAAAC;MAAA;;yBAAdD,eAAc;MAAA;;cAAdA;MAAc;;kBARhB,CACPE,yDAAY,EACZC,iEAAa,EACbC,6DAAW,EACXC,kEAAqB,CAACZ,WAAW,CAAC,EAClCa,6EAAa,CACd;MAAA;;4HAEUN,eAAc;UAAAO,eATTX,8FAAsB;UAAAY,UAEpCN,yDAAY,EACZC,iEAAa,EACbC,6DAAW,6DAEXE,6EAAa;QAAA;MAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCfJG,uBAAsB;QACjC;;;;QAIA,iCAAoBC,aAA4B;UAAAT;UAA5B,kBAAa,GAAbS,aAAa;QAAmB;QACpD;;;;QAAAC;UAAAC;UAAAC,OAIA,mBAAO;YAAA;YACL,IAAI,CAACH,aAAa,CAACI,WAAW,EAAE;YAChC,OAAO,IAAI,CAACJ,aAAa,CAACK,YAAY,EAAE,CAACC,IAAI,CAC3C,2CAAI,UAACC,GAAG,EAAI;cACVC,KAAI,CAACR,aAAa,CAACS,WAAW,EAAE;cAChC,IAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;cACvD,IAAMC,UAAU,GAAGN,GAAG,CAACO,aAAa;cACpC,IAAIJ,YAAY,IAAIA,YAAY,IAAIG,UAAU,EAAE;gBAC9CF,YAAY,CAACI,OAAO,CAAC,YAAY,EAAEF,UAAU,CAAC;gBAC9CG,UAAU,CAAC,YAAK;kBACdC,QAAQ,CAACC,MAAM,EAAE;gBACnB,CAAC,EAAE,EAAE,CAAC;gBACN,OAAO,0CAAG,uBAAuB,CAAC;eACnC,MAAM;gBACLP,YAAY,CAACI,OAAO,CAAC,YAAY,EAAEF,UAAU,CAAC;gBAC9C,OAAO,0CAAG,8BAA8B,CAAC;;YAE7C,CAAC,CAAC,EACF,kDAAW,YAAK;cACdL,KAAI,CAACR,aAAa,CAACS,WAAW,EAAE;cAChC,OAAO,0CAAG,iCAAiC,CAAC;YAC9C,CAAC,CAAC,CACH;UACH;QAAC;QAAA;MAAA;;yBAjCUV,uBAAsB;MAAA;;eAAtBA,uBAAsB;QAAAoB,SAAtBpB,uBAAsB;QAAAqB,YAFrB;MAAM;;;;;","names":["casesRoutes","path","component","_chq_cases_table_chq_cases_table_component__WEBPACK_IMPORTED_MODULE_0__","resolve","version","src_app_resolvers_versionControl_resolver__WEBPACK_IMPORTED_MODULE_3__","ChqCasesModule","_classCallCheck","_angular_common__WEBPACK_IMPORTED_MODULE_5__","_angular_material_icon__WEBPACK_IMPORTED_MODULE_6__","src_app_icons_module__WEBPACK_IMPORTED_MODULE_2__","_angular_router__WEBPACK_IMPORTED_MODULE_7__","src_app_widgets_chq_widgets_module__WEBPACK_IMPORTED_MODULE_1__","declarations","imports","VersionControlResolver","commonService","_createClass","key","value","showLoading","checkVersion","pipe","res","_this","hideLoading","localVersion","localStorage","getItem","appVersion","buildRevision","setItem","setTimeout","location","reload","factory","providedIn"],"sources":["webpack:///src/app/modules/quote/chq-cases/chq-cases.module.ts","webpack:///src/app/resolvers/versionControl.resolver.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChqCasesTableComponent } from './chq-cases-table/chq-cases-table.component';\nimport { Route, RouterModule } from '@angular/router';\nimport { WidgetsModule } from 'src/app/widgets/chq-widgets.module';\nimport { MatIconModule } from '@angular/material/icon';\nimport { IconsModule } from 'src/app/icons.module';\nimport { VersionControlResolver } from 'src/app/resolvers/versionControl.resolver';\n\nconst casesRoutes: Route[] = [\n  { \n    path: '', \n    component: ChqCasesTableComponent,\n    resolve: { version: VersionControlResolver },\n  }\n];\n\n@NgModule({\n  declarations: [ ChqCasesTableComponent ],\n  imports: [\n    CommonModule,\n    MatIconModule,\n    IconsModule,\n    RouterModule.forChild(casesRoutes),\n    WidgetsModule,\n  ],\n})\nexport class ChqCasesModule {}\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\n\nimport { catchError, map, Observable, of } from 'rxjs';\nimport { CommonService } from '../services/common/common.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VersionControlResolver implements Resolve<Observable<any>> {\n  /**\n   * contructor\n   * @param commonService \n   */\n  constructor(private commonService: CommonService) { }\n  /**\n   * resolve the \n   * @returns \n   */\n  resolve(): Observable<any> {\n    this.commonService.showLoading();\n    return this.commonService.checkVersion().pipe(\n      map((res) => {\n        this.commonService.hideLoading();\n        const localVersion = localStorage.getItem('appVersion');\n        const appVersion = res.buildRevision;\n        if (localVersion && localVersion != appVersion) {\n          localStorage.setItem('appVersion', appVersion);\n          setTimeout(() => {\n            location.reload();\n          }, 10);\n          return of('new version available');\n        } else {\n          localStorage.setItem('appVersion', appVersion);\n          return of('new version is not available');\n        }\n      }),\n      catchError(() => {\n        this.commonService.hideLoading();\n        return of('data not available at this time');\n      })\n    )\n  }\n}"]}