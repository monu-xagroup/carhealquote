{"version":3,"file":"default-src_app_resolvers_versionControl_resolver_ts-node_modules_angular_material_fesm2020_b-11c988.js","mappings":"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","sources":["./src/app/resolvers/versionControl.resolver.ts","./node_modules/@angular/material/fesm2020/badge.mjs"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Resolve } from '@angular/router';\r\n\r\nimport { catchError, map, Observable, of } from 'rxjs';\r\nimport { CommonService } from '../services/common/common.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VersionControlResolver implements Resolve<Observable<any>> {\r\n  /**\r\n   * contructor\r\n   * @param commonService \r\n   */\r\n  constructor(private commonService: CommonService) { }\r\n  /**\r\n   * resolve the \r\n   * @returns \r\n   */\r\n  resolve(): Observable<any> {\r\n    this.commonService.showLoading();\r\n    return this.commonService.checkVersion().pipe(\r\n      map((res) => {\r\n        this.commonService.hideLoading();\r\n        const localVersion = localStorage.getItem('appVersion');\r\n        const appVersion = res.buildRevision;\r\n        if (localVersion && localVersion != appVersion) {\r\n          localStorage.setItem('appVersion', appVersion);\r\n          setTimeout(() => {\r\n            location.reload();\r\n          }, 10);\r\n          return of('new version available');\r\n        } else {\r\n          localStorage.setItem('appVersion', appVersion);\r\n          return of('new version is not available');\r\n        }\r\n      }),\r\n      catchError(() => {\r\n        this.commonService.hideLoading();\r\n        return of('data not available at this time');\r\n      })\r\n    )\r\n  }\r\n}","import * as i0 from '@angular/core';\nimport { Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() {\n        return this._overlap;\n    }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateHostAriaDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n    get hidden() {\n        return this._hidden;\n    }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateHostAriaDescription(newDescription) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        if (newDescription) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        this._description = newDescription;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n}\nMatBadge.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatBadge.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: MatBadge, selector: \"[matBadge]\", inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    inputs: ['disabled: matBadgeDisabled'],\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: ['matBadgeOverlap']\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: ['matBadgeHidden']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatBadgeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] });\nMatBadgeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"names":["catchError","map","of","VersionControlResolver","constructor","commonService","resolve","showLoading","checkVersion","pipe","res","hideLoading","localVersion","localStorage","getItem","appVersion","buildRevision","setItem","setTimeout","location","reload","factory","providedIn","i0","Directive","Optional","Inject","Input","NgModule","mixinDisabled","MatCommonModule","i1","A11yModule","coerceBooleanProperty","ANIMATION_MODULE_TYPE","nextId","_MatBadgeBase","BADGE_CONTENT_CLASS","MatBadge","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","_color","_overlap","position","size","_id","_isInitialized","ngDevMode","nativeElement","nodeType","ELEMENT_NODE","Error","color","value","_setColor","overlap","val","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateHostAriaDescription","hidden","_hidden","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","removeDescription","badgeElement","createElement","activeClass","setAttribute","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","describe","colorPalette","remove","badges","querySelectorAll","Array","from","ɵfac","NgZone","ElementRef","AriaDescriber","Renderer2","ɵdir","type","args","selector","inputs","host","undefined","decorators","MatBadgeModule","ɵmod","ɵinj","imports","exports","declarations"],"sourceRoot":"webpack:///","x_google_ignoreList":[1]}